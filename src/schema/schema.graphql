

type Query {
    users: ResultUsers
    login(email: String!, password: String!): ResultLogin
}

type Mutation {
    register(user: UserInput!): User

}

interface Result {
    status: Boolean!
    message: String!
}

type ResultUsers implements Result{
    status: Boolean!
    message: String!
    users: [User!]!
}

type ResultLogin implements Result{
    status: Boolean!
    message: String!
    user: User
}

type User {
    id: ID!
    name: String!
    lastname: String!
    email: String!
    password: String!
    registerDate: String!
    birthday: String!
    role: Role! 
}
input UserInput {
    id: ID
    name: String!
    lastname: String!
    email: String!
    password: String!
    birthday: String!
    role: Role=CLIENT
}

enum Role {
    CLIENT
    ADMIN
}